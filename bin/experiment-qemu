#!/usr/bin/env ruby
require 'bundler/setup'
Bundler.require(:default)
$:.unshift(File.expand_path(File.join(__dir__, '../lib')))
require 'vemu'
# require 'debug'

require 'open3'
# puts OS.report

vm = Vemu::VM.new('early')
vm.cpus = 1
vm.memory = '512'
vm.cloud_init.add_user(:lime, sudoer: true, ssh_keys: 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJu+2F3cgwei6vVQUsBjv5P+Na8mtLSfRXelrpUXphbm')
# vm.add_tap_netdev('eth0', mac: '52:55:55:c2:d9:ac', host_tap: 'tap0')

vm.add_user_netdev('eth0', mac: '52:55:55:c2:d9:af')

vm.reset_machine!
vm.prepare_vm_files
child_pid = fork do
  STDOUT.close
  STDERR.close
  STDIN.close

  vm.vm_start_exec
  exit(1)
end

puts "QEMU PID: #{child_pid}. Waiting for qmp socket..."
start_time = Time.now.to_f
cli = nil
loop do
  socket_path = vm.qmp_socket_path
  if File.socket?(socket_path)
    cli = UNIXSocket.new(socket_path)
    break
  end
  if (Time.now.to_f - start_time) > 30.0
    puts "QEMU start timed out after 30 seconds"
    exit(1)
  end
  sleep(0.2)
end
puts "Connected to qmp."

read_messages = []
Thread.start do
  loop do
    begin
      read_messages << JSON.parse(cli.readline("\r\n", chomp: true))
    rescue EOFError
      puts "(qmp socket EOF)"

      break
    end
  end
end

cmd = JSON.dump({ execute: 'qmp_capabilities', arguments: { enable: ['oob'] } })
cli.write("#{cmd}\r\n")

ga_socket = UNIXSocket.new(vm.ga_socket_path)
loop do
  begin
    data = JSON.parse(ga_socket.readline(chomp: true))
    info = data['info']
    break if info == '--finished--'

    puts "Info from VM: #{info}"
  rescue EOFError
    puts "(guestagent socket EOF)"

    break
  end
end

sleep(2)

cmd = JSON.dump({ execute: 'quit', arguments: {} })
cli.write("#{cmd}\r\n") rescue nil

sleep(2)

puts "Done. read_messages:"
puts(read_messages)
